---
title: "cwiczenie_2"
author: "Iwo"
format: 
  html:
    self-contained: true
    toc: true
    toc-depth: 4
    toc-location: right
    toc-title: "Spis treści"
    number-sections: true
    number-depth: 4
    code-fold: show
    code-summary: "Show the code"
    code-tools: true
    code-block-bg: true
    code-block-border-left: "black"
    code-line-numbers: false
    code-copy: true
    html-math-method: katex
    smooth-scroll: true
    anchor-sections: true
    link-external-icon: true
    link-external-newwindow: true
    theme:
        light: cosmo
        dark: darkly
    fontsize: 1.0em
    linestretch: 1.5
execute:
  warning: false
  echo: true
  error: false
editor_options: 
  chunk_output_type: console
---

# Materiały do ćwiczenia 2

## Wczytywanie danych

```{r}
library(tidymodels) 
library(skimr) 
library(GGally) 
library(openair) 
tidymodels_prefer()

air <- mydata |> selectByDate(year = 2002) 
air |> skim()
air <- air |> na.omit()
```

```{r}
set.seed(222)
air[sample(1:nrow(air), size = 300, replace = F),] |> 
  select(nox, no2) |> 
  ggpairs()
```

### Wykres regresji liniowej, do sprawdzenia danych 

```{r}
library(ggpubr)
air[sample(1:nrow(air), size = 300, replace = F),] |> 
  select(nox, no2) |> 
  ggplot(aes(nox, no2)) +
  geom_point() +
  geom_smooth(method = "lm", se = T, formula = y ~ x) + 
  stat_cor(label.x = 10, label.y = 80) + 
  stat_regline_equation(label.x = 10, label.y = 82) +
  theme_bw()
```

```{r}
air |>    
  ggplot(aes(date, o3)) +     
  geom_line() +     
  theme_bw()
```

```{r}
air |> 
  pull(o3) |> 
  range()  

air <-
  air |>
  mutate(ozone = cut(
    o3,
    breaks = c(-0.1, 10, 53),
    labels = c("Niskie", "Wysokie")
  ))

air |> count(ozone)
```

# Ćwiczenie 2

## Przygotowanie danych daty

```{r}
set.seed(222)
library(lubridate)

air <- air |> 
  mutate(
    month = factor(month(date), labels = month.abb),
    wday = factor(wday(date, label = TRUE)),
    hour = hour(date)
  )

split <- initial_split(air, strata = ozone, prop = 0.8)
train <- training(split)
test <- testing(split)

```

## Receptura

```{r}
rec <- recipe(ozone ~ ., data = train) |>
  update_role(date, o3, new_role = "ID") |>
  step_rm(nox) |>
  step_normalize(all_numeric_predictors()) |>
  step_YeoJohnson(all_numeric_predictors()) |>
  step_dummy(all_nominal_predictors())

```

nox usuwamy, bo mocno koreluje z no2

## Model logistyczny

```{r}
log_spec <- logistic_reg() |> 
  set_engine("glm")

log_wf <- workflow() |> 
  add_recipe(rec) |> 
  add_model(log_spec)

log_fit <- fit(log_wf, data = train)
```

## Prognozy i ewaluacja

```{r}
log_pred <- predict(log_fit, test, type = "prob") |> 
  bind_cols(predict(log_fit, test)) |> 
  bind_cols(test |> select(ozone))

log_pred |> roc_auc(truth = ozone, .pred_Wysokie)

log_pred |> conf_mat(truth = ozone, estimate = .pred_class)

log_pred |> 
  roc_curve(truth = ozone, .pred_Wysokie) |> 
  autoplot()
```


